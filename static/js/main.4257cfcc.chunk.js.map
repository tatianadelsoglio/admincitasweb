{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4257cfcc.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {v4 as uuidv4} from 'uuid'; /*con esto creamos id automaticamente sin tener DB, se instala ejecutando en el terminal:\r\nnpm i uuid */\r\nimport PropTypes from 'prop-types';\r\n\r\n/* Los PropTypes es una forma de documentar los componentes, ayuda a quien viene hacer la mantencion del sistema\r\na saber que elementos son componentes y no los confunda con otra cosa. También son útiles para hacer Typechecking.\r\nY ya vienen incorporados en React.\r\n*/\r\n\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    /*crear State de citas, donde:\r\n    cita, es el nombre del State, es el que contiene toda la info del state.\r\n    actualizarCita: es la funcion que va sobreescribir el State*/\r\n    const [cita, actualizarCita]= useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    /* Función que se ejecuta cada que el usuario escribe en un input*/\r\n    const actualizarState = (e) => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    /*Extraer valores, todos los valores entre {} son los que vienen de 'cita' ya que esta almacana toda la info del state.\r\n    Esto nos ahorra tener que escribir \"cita.mascota\", \"cita.propietario\", etc.\r\n    A su vez esto hay que colocarlo dentro de los elementos que correspondan con la sintaxis: value: valor. En nuestro caso\r\n    va en los inputs. */ //APLICAMOS DESTRUCTURING.\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n\r\n    //Cuando el usuario presiona agregar cita. Cuando se envia el formulario\r\n\r\n    const submitCita = (e) => {\r\n        e.preventDefault(); /*con este comando lo que hacemos es que no se envie el mensaje por defecto con el metodo get*/\r\n\r\n        //Validar\r\n        \r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '' ){\r\n            /*Lo que sigue nos sirve para comprobar que funciona, y se le coloca la sentencia return para que pare y no siga, código:\r\n                console.log('Hay un eror')\r\n                return;\r\n            */\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n\r\n        //Eliminar mensaje previo\r\n\r\n        actualizarError(false);\r\n\r\n        //Asiganar un ID\r\n\r\n        cita.id = uuidv4();\r\n\r\n        //Crear la cita. Para ellos creamos un State Principal que va a almacenar todas las citas, y este mismo lo vamos a usar en la app.js.\r\n\r\n        crearCita(cita);\r\n\r\n        //Reiniciar el form\r\n\r\n        actualizarCita({\r\n\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Crear Cita</h2>\r\n\r\n            {/*En este caso aca no se pueden usar if por lo que se debe usar un ternario: */}\r\n\r\n            {error ? <p className='aleerta-error'>Todos los campos son obligatorios</p>   : null}\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type='text'\r\n                    name='mascota'\r\n                    className='u-full-width'\r\n                    placeholder='Nombre Mascota'\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type='text'\r\n                    name='propietario'\r\n                    className='u-full-width'\r\n                    placeholder='Nombre Dueño de la Mascota'\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input\r\n                    type='date'\r\n                    name='fecha'\r\n                    className='u-full-width'\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input\r\n                    type='time'\r\n                    name='hora'\r\n                    className='u-full-width'\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    className='u-full-width'\r\n                    name='sintomas'\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type='sumit'\r\n                    className='u-full-width button-primary'\r\n                \r\n                >Agregar Cita</button>\r\n\r\n            </form>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n    return (\r\n        <>\r\n            <div className='cita'>\r\n\r\n                <p> Mascota: <span>{cita.mascota}</span> </p>\r\n                <p> Propietario: <span>{cita.propietario}</span> </p>\r\n                <p> Fecha: <span>{cita.fecha}</span> </p>\r\n                <p> Hora: <span>{cita.hora}</span> </p>\r\n                <p> Sintomas: <span>{cita.sintomas}</span> </p>\r\n\r\n            </div>\r\n\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={() => eliminarCita(cita.id)} //Al usar un arrow function evitamos invocar la funcion en el instante, de este modo tiene que esperar el click para que sea llamado\r\n            >Eliminar &times;</button>\r\n\r\n\r\n        </>\r\n    );\r\n\r\n}\r\nCita.propTypes = {\r\n    \r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, {useState, useEffect} from \"react\";\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\nfunction App() {\n\n  //Citas en local storage.\n  //IMPORTANTE: 'localStorage' solo almacena string y como nosotros le pasamos un arreglo necesito de JSON.parse para\n  //pasar ese arreglo a string y sea fácil de manipular.\n\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  //si no hay citas iniciales como es este caso, entonces las citas iniciales van a ser iguales a un arreglo vacio. \n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  //Arreglo de citas. El valor inicial de este arreglo va a ser \"citasIniciales\" creado en el punto anterior, esto es para poder mantenerlo en un Storage y no perder la info.\n  const[citas, guardarCitas] = useState(citasIniciales);\n\n  /* useEffect para realizar ciertas operaciones cuando el state cambia.\n  El useEffect siempre es un arrow function.\n  Se ejecuta cuando el componente esta listo, pero tambien cuando hay cambios en el componente. Es decir, cuando se \n  actualiza algo se vuelve a recargar. Para indicarle cuantas veces debe ejecutarse hay que pasarle el valor a través de\n  un arreglo \"[num]\". Si queremos que se ejecute una sola vez, se pasa el arreglo vacio: [] antes del parentesis de \n  cierre y despues de una , de la sentencia anterior.\n  Este useEffect lo vamos a usar para actualizar el Storage, es decir que cada vez que se cree una nueve cita o se \n  elimine, cada vez que el State cambie que tambien el storage cambie.\n  Los [] son dependencias. Lo que yo le pase dentro es lo que voy a utilizar como indicador para que este se ejecute,\n  en este caso le pasamos el nombre del state, cosa que cada vez que el state se actualice (se agregue o elimine una cita),\n  las operaciones que se encuentran dentro del useEffect se ejecuten, por lo que en este caso, el storage se actualiza.\n  */\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n\n    }\n\n  }, [citas] );\n\n\n  //Función que tome las citas actuales y agregue las nuevas\n  const crearCita = cita => {\n    guardarCitas([...citas, cita ]); /*para crear una copia del state anterior*/\n  }\n\n  //Funcion que elimina una cita por su id\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n\n  }\n\n  //Mensaje condicional, cambia el titulo segun el caso\n  const titulo = citas.length === 0 ? 'No hay citas'  : 'Administra tus Citas';\n\n\n  return (\n    <>\n      <h1> ADMINISTRADOR DE PACIENTES</h1>\n      <div className=\"conteiner\">\n          <div className=\"row\">\n            <div className=\"one-half column\">\n              <Formulario \n                crearCita={crearCita}\n              />\n            </div>\n            <div className=\"one-half column\">\n              <h2>{titulo}</h2>\n              {citas.map(cita => (\n\n                <Cita \n                  key={cita.id}\n                  cita={cita}\n                  eliminarCita={eliminarCita}\n                />\n\n              ))}\n            </div>\n          </div>\n      </div>\n\n    </>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}